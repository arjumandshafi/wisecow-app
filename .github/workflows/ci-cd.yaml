name: CI/CD for Wisecow

on:
  push:
    branches:
      - main   # Trigger when pushing to main

jobs:
  build-and-deploy:
    runs-on: self-hosted   # Your Windows self-hosted runner

    steps:
    # Step 1: Checkout repo
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Login to Docker Hub
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Build & Push Docker Image
    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/wisecow:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/wisecow:latest

    # Step 4: Install kubectl (no admin needed)
    - name: Install kubectl
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://dl.k8s.io/release/v1.29.0/bin/windows/amd64/kubectl.exe -OutFile kubectl.exe
        $env:PATH += ";$PWD"
        .\kubectl.exe version --client

    # Step 5: Configure kubeconfig (decode base64 secret)
    - name: Configure kubeconfig
      shell: powershell
      run: |
        $b64 = "${{ secrets.KUBECONFIG_DATA }}" -replace "`r`n","" -replace "\s",""
        $decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($b64))

        $kubeDir = "$env:USERPROFILE\.kube"
        if (-Not (Test-Path $kubeDir)) { New-Item -ItemType Directory -Force -Path $kubeDir }

        Set-Content -Path "$kubeDir\config" -Value $decoded -Encoding utf8

        .\kubectl.exe config get-contexts

    # Step 6: Deploy to Kubernetes
    - name: Deploy to Kubernetes
      shell: powershell
      run: |
        # Apply Deployment
        .\kubectl.exe apply -f k8s/deployment.yaml

        # Check if Service exists
        $svcExists = .\kubectl.exe get svc wisecow-service -o name 2>$null
        if ($svcExists) {
            Write-Host "Service exists. Deleting before applying new NodePort service..."
            .\kubectl.exe delete svc wisecow-service
        }

        # Apply Service (NodePort)
        .\kubectl.exe apply -f k8s/service.yaml

        # Apply Ingress
        .\kubectl.exe apply -f k8s/ingress.yaml
